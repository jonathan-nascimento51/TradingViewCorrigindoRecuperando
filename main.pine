//@version=6
indicator("confluenciaFiboFractal_v10.1", shorttitle="main_v10.1", overlay=true, max_lines_count=200, max_labels_count=200)

import jonathanmoletta17/FractalUtils/1 as fractals
import jonathanmoletta17/FiboMath/2 as fibomath
import jonathanmoletta17/SwingDetection/2 as swing
import jonathanmoletta17/DrawingHelpers/1 as draw
import jonathanmoletta17/BiasUtils/1 as bias

// ==================================================================
// 1. INPUTS (Top N pesos, parâmetros básicos e novos toggles)
// ==================================================================
showFractalPoints  = input.bool(true,   "Mostrar Fractais H1")
showFibLines       = input.bool(true,   "Mostrar Linhas Fibonacci")
showZones          = input.bool(true,   "Mostrar Zonas de Confluência")
showFibPivots      = input.bool(false,  "Mostrar Pivôs do Fibonacci")
showDiagnostics    = input.bool(false,  "Training Mode")
fibModeInput       = input.string("Auto", "Modo Fibonacci", options=["Auto", "Retracement", "Extension", "Projection"])

atrLength          = input.int(14,      "Comprimento do ATR",                  minval=5)
atrEmaPeriod       = input.int(10,      "Período EMA do ATR",                  minval=1)
atrMultiplier      = input.float(1.5,   "Multiplicador do ATR",                step=0.1, minval=0.5, maxval=3)
meanStdLength      = input.int(50,      "Período Média/Desvio",                minval=1)
minSignificance    = input.float(1.0,   "Significância Mínima (peso)",         step=0.01, minval=0.0)

n                  = input.int(5,       "Período do Fractal (n)",              minval=1, maxval=10)
maxFractalsToCheck = input.int(50,      "Máx. Fractais a Checar",              minval=1)

topN               = input.int(0,       "Mostrar Top N Níveis (0=OFF)",        minval=0, maxval=10)
topNMode           = input.string("OFF", "Modo TopN", options=["OFF", "Soft", "Strict"])

// Comprimentos das MAs para cálculo de viés
biasShortLen       = input.int(10,      "Período MA Curta (Bias)",             minval=1)
biasLongLen        = input.int(50,      "Período MA Longa (Bias)",             minval=1)

// Novos inputs solicitados
autoHideLow        = input.bool(false,  "Auto‐Hide Low Weights em TF ≤ X")                 // habilita/ desabilita filtro de peso baixo
tfHideThresh       = input.int(60,      "TF Limite para Auto‐Hide (minutos)",  minval=1)   // em minutos
weightMinPct       = input.float(0.50,  "Peso Mínimo (%) para mostrar nível",  minval=0.0, maxval=1.0, step=0.01)

replayMode         = input.bool(false,  "Replay Step by Step (mostrar apenas último swing)")

// Quantos swings mostrar ao utilizar o modo de replay
replayCount        = input.int(1,       "Quantos Swings Exibir no Replay",     minval=1)
minZScoreAdj     = input.float(0.05,  "Z-score mínimo p/ peso",       step=0.01, minval=0.0)
minSwingPct        = input.float(1.0,   "Range mínimo P1-P2 (%)",      step=0.1, minval=0.0)
minSwingBars       = input.int(3,       "Barras mínimas entre P1-P3",  minval=1)

// ----- Parâmetros para lógica de inércia e sistema de score -----
scoreThresholdPct   = input.float(25.0, "Melhora Mínima do Score para Troca (%)")
invalidateOnP2Break = input.bool(true,  "Invalidar Swing Ativo no Rompimento de P2?")

pbQualityIdeal      = input.float(1.0,  "Pontuação Pullback Ideal", step=0.1)
pbQualityGood       = input.float(0.5,  "Pontuação Pullback Boa",  step=0.1)
durationOptimalMin  = input.float(1.0,  "Duração Ótima Mín (x ATRLen)", step=0.1)
durationOptimalMax  = input.float(3.0,  "Duração Ótima Máx (x ATRLen)", step=0.1)
swingScoreIntensity = input.float(10.0, "Intensidade do Score no Peso", step=0.1, minval=1.0)

// Constants for weight classification
HIGH_WEIGHT_FRAC   = 0.75
MEDIUM_WEIGHT_FRAC = 0.50

// ==================================================================
// 2. DADOS H1 CONSOLIDADOS (CLOSE, VOLATILIDADE E PIVOTS)
// ==================================================================
[h1Close, h1VolPctRaw, pivotHighH1, pivotLowH1] = request.security(syminfo.tickerid, "60", [close,
     ta.stdev(close, meanStdLength) / ta.sma(close, meanStdLength),
     ta.pivothigh(high, n, n),
     ta.pivotlow(low, n, n)])
atrValue = ta.ema(ta.atr(atrLength), atrEmaPeriod)
h1Mean   = ta.sma(h1Close, meanStdLength)
h1Stdev  = ta.stdev(h1Close, meanStdLength)
volPct   = math.max(h1VolPctRaw, 0)

// ==================================================================
// 3. ARRAYS E VARIÁVEIS PARA FRACTAIS E FIBONACCI
// ==================================================================
var float[] fractalPrices   = array.new_float()   // preços únicos de fractais
var int[]   fractalTouches  = array.new_int()     // contagem de toques em cada fractal
var float[] fractalSorted   = array.new_float()   // preços de fractais ordenados
var label[] fractalPointLabels = array.new_label()  // armazena labels de fractais
// "fractalPrices" e "fractalTouches" são podados em "addFractal" para evitar
// crescimento ilimitado das estruturas

var float[] fibLevels  = array.from(0.0, 0.236, 0.382, 0.5, 0.618, 0.786, 1.0, 1.272, 1.618, 2.0, 2.618)
levelsCount = array.size(fibLevels)
var float[] fibPrices  = array.new_float(levelsCount, 0.0)
var float[] fibWeights = array.new_float(levelsCount, 0.0)
var float[] clusterPrices = array.new_float()
var int[]   clusterCounts = array.new_int()

// Placeholders fixos (criados apenas uma vez)
var  line[]    fibLines     = array.new_line()        // linhas de Fibonacci (levelsCount)
var label[]   fibLabels     = array.new_label()       // labels de “% | Peso” (levelsCount)
var label[]   circleLabels  = array.new_label()       // Labels-círculo (levelsCount)
var label[]   fibPivotLabels = array.new_label()      // Labels P1/P2/P3

var line[]    zoneLinesLow   = array.new_line()       // linha inferior de cada zona (levelsCount)
var line[]    zoneLinesHigh  = array.new_line()       // linha superior de cada zona (levelsCount)
var linefill[] zoneFills     = array.new_linefill()   // linefills para zonas (levelsCount)

var float lastHigh = na   // último pivot high (H1)
var float lastLow  = na   // último pivot low (H1)
var int   lastHighBar = na  // bar_index do último pivot high
var int   lastLowBar  = na  // bar_index do último pivot low

// Arrays para sequenciar pivôs e detectar P1→P2→P3
var float[] pivotPrices = array.new_float()
var string[] pivotTypes = array.new_string()
var int[]    pivotBars  = array.new_int()

// Dados para clusters de Fibonaccis de múltiplos swings
var int     lastAddedSwingBar = na

var label diagLabel = na
var float lastSwingScore = na

// >> NOVAS VARIÁVEIS DE ESTADO PARA INÉRCIA <<
var float activeP1 = na
var float activeP2 = na
var float activeP3 = na
var int   activeDir = 0
var string activeMode = "Retracement"
var int activeP1Bar = na, var int activeP2Bar = na, var int activeP3Bar = na
var float activePbPct = na
var bool  activeBreakout = false
var float activeScore = na

// Variável global para armazenar, a cada swing, o maxWeight calculado
var float lastMaxWeight = 0.0

// Variáveis de “replay” de swings
var int[]   swingBars   = array.new_int()  // armazena bar_index de cada swing detectado
var int     swingsCount = 0                // contador de swings detectados
var table tableWeights = table.new(position.top_left, 5, levelsCount + 1, bgcolor=color.new(color.black, 65), frame_color=color.rgb(78, 82, 94))  // tabela auxiliar de "weight"

var float topVal    = na
var float bottomVal = na
var float rangeVal  = na

// ==================================================================
// 5. FUNÇÃO PARA CALCULAR Z-SCORE (DISTÂNCIA AO PREÇO MÉDIO H1)
var label debugLbl = na
// ==================================================================
//     Agora retorna o valor com sinal para uso em cálculos de peso
// ==================================================================
float biasVal   = bias.biasFilter(request.security(syminfo.tickerid, "D", close), biasShortLen, biasLongLen)
string biasTxt  = biasVal == 1 ? "Alta" : biasVal == -1 ? "Baixa" : "Neutro"

float ema10Daily = request.security(
     syminfo.tickerid,
     "D",
     ta.ema(close, biasShortLen),
     lookahead = barmerge.lookahead_on,
     gaps      = barmerge.gaps_off)
float ema50Daily = request.security(
     syminfo.tickerid,
     "D",
     ta.ema(close, biasLongLen),
     lookahead = barmerge.lookahead_on,
     gaps      = barmerge.gaps_off)

plot(ema10Daily, title="EMA 10D", color=color.orange)
plot(ema50Daily, title="EMA 50D", color=color.blue)

// ==================================================================
// 7. COLETA DE FRACTAIS H1 (pivot high/low)
// ==================================================================
float prevHigh = lastHigh[1]
float prevLow  = lastLow[1]

if not na(pivotHighH1)
    fractals.addFractal(fractalTouches, fractalPrices,fractalSorted, pivotHighH1, maxFractalsToCheck, atrValue, volPct, atrMultiplier, syminfo.mintick)
if not na(pivotLowH1)
    fractals.addFractal(fractalTouches, fractalPrices,fractalSorted, pivotLowH1, maxFractalsToCheck, atrValue, volPct, atrMultiplier, syminfo.mintick)


// ==================================================================
// 8. CONTAGEM DE TOQUES DE FRACTAL NO TF H1 CONFIRMADO
// ==================================================================
if timeframe.isminutes and timeframe.multiplier == 60 and barstate.isconfirmed and array.size(fractalPrices) > 0
    int startIdx2 = math.max(0, array.size(fractalPrices) - maxFractalsToCheck)
    for i = startIdx2 to array.size(fractalPrices) - 1
        float fractalPrice = array.get(fractalPrices, i)
        if high >= fractalPrice and low <= fractalPrice
            array.set(fractalTouches, i, array.get(fractalTouches, i) + 1)

// ==================================================================
// 9. PLOTAGEM DOS PONTOS DE FRACTAL (APENAS EM TF = H1)
// ==================================================================
if showFractalPoints
    // apenas plota quando pivotHighH1/pivotLowH1 corresponde a um dos últimos N valores registrados
    if not na(pivotHighH1) and (na(prevHigh) or pivotHighH1 != prevHigh)
        float offsetTicksHigh = syminfo.mintick * 10
        int pivotHighTime = request.security(syminfo.tickerid, "60", time[n])
        label fractalHighLabel = label.new( x = pivotHighTime, y = pivotHighH1 + offsetTicksHigh, text = "▲", xloc = xloc.bar_time, yloc = yloc.price, color = color.new(color.green, 0), textcolor = color.white, size = size.tiny)
        array.push(fractalPointLabels, fractalHighLabel)
        if array.size(fractalPointLabels) > maxFractalsToCheck
            label.delete(array.shift(fractalPointLabels))
    if not na(pivotLowH1) and (na(prevLow) or pivotLowH1 != prevLow)
        float offsetTicksLow = syminfo.mintick * 10
        int pivotLowTime = request.security(syminfo.tickerid, "60", time[n])
        label fractalLowLabel = label.new( x = pivotLowTime, y = pivotLowH1 - offsetTicksLow, text = "▼", xloc = xloc.bar_time, yloc = yloc.price, color = color.new(color.red, 0), textcolor = color.white, size = size.tiny)
        array.push(fractalPointLabels, fractalLowLabel)
        if array.size(fractalPointLabels) > maxFractalsToCheck
            label.delete(array.shift(fractalPointLabels))
else
    fractals.clearFractalPoints(fractalPointLabels)

// ==================================================================
// 10. ATUALIZAÇÃO DE ÚLTIMOS SWINGS (HIGH / LOW) + “Replay”
// ==================================================================
if not na(pivotHighH1)
    if pivotHighH1 != prevHigh
        swingsCount += 1
        array.push(swingBars, bar_index)
        array.push(pivotPrices, pivotHighH1)
        array.push(pivotTypes, "H")
        array.push(pivotBars, bar_index)
        if array.size(pivotPrices) > 10
            array.shift(pivotPrices)
            array.shift(pivotTypes)
            array.shift(pivotBars)
    lastHigh := pivotHighH1
    lastHighBar := bar_index
    topVal    := math.max(lastHigh, lastLow)
    bottomVal := math.min(lastHigh, lastLow)
    rangeVal  := topVal - bottomVal

if not na(pivotLowH1)
    if pivotLowH1 != prevLow
        swingsCount += 1
        array.push(swingBars, bar_index)
        array.push(pivotPrices, pivotLowH1)
        array.push(pivotTypes, "L")
        array.push(pivotBars, bar_index)
        if array.size(pivotPrices) > 10
            array.shift(pivotPrices)
            array.shift(pivotTypes)
            array.shift(pivotBars)
    lastLow := pivotLowH1
    lastLowBar := bar_index
    topVal    := math.max(lastHigh, lastLow)
    bottomVal := math.min(lastHigh, lastLow)
    rangeVal  := topVal - bottomVal

bool doAutoHide = autoHideLow and timeframe.isminutes and timeframe.multiplier <= tfHideThresh
int replayStartIdx = math.max(0, swingsCount - replayCount)

// ==================================================================
// 11. CRIAÇÃO ÚNICA DE PLACEHOLDERS (apenas na primeira barra)
// ==================================================================
if barstate.isfirst
    // (A) Placeholders para linhas Fibonacci, labels e círculos
    for i = 0 to levelsCount - 1
        // 1) Linha cinza quase invisível
        line phline = line.new(x1 = bar_index, y1 = 0, x2 = bar_index + 1, y2 = 0, xloc = xloc.bar_index, extend = extend.right, color = color.new(color.gray, 80), width = 1, style = line.style_dotted)

        // 2) Label “% | Peso” invisível (texto vazio, cor cinza total)
        label flabel = label.new( x = bar_index + 1, y = 0, text = "", xloc = xloc.bar_index, yloc = yloc.price, style = label.style_label_left, color = color.new(color.gray, 100), textcolor = color.white, size = size.small)

        // 3) Círculo invisível
        label clabel = label.new(x = bar_index, y = 0, text = "", xloc = xloc.bar_index, yloc = yloc.price,style = label.style_circle, size = size.small, color = color.new(color.gray, 100))

        array.push(circleLabels, clabel)
        array.push(fibLabels, flabel)
        array.push(fibLines, phline)

    // Labels para P1/P2/P3
    for _ = 0 to 2
        label plbl = label.new(x = bar_index, y = 0, text = "", xloc = xloc.bar_index, yloc = yloc.price, style = label.style_label_down, color = color.new(color.orange, 0), textcolor = color.white, size = size.tiny)
        array.push(fibPivotLabels, plbl)

    // (B) Placeholders para zonas (linhas + linefill) – invisíveis em y = 0
    for i = 0 to levelsCount - 1
        line zoneLowLine = line.new( x1     = bar_index, y1 = 0,x2     = bar_index + 1, y2 = 0, xloc   = xloc.bar_index, extend = extend.right,color  = color.new(color.blue, 98), width = 1)
        line zoneHighLine = line.new(x1     = bar_index, y1 = 0,x2     = bar_index + 1, y2 = 0,xloc   = xloc.bar_index, extend = extend.right,color  = color.new(color.blue, 98), width = 1)

        array.push(zoneLinesLow,  zoneLowLine)
        array.push(zoneLinesHigh, zoneHighLine)
        array.push(zoneFills, linefill.new(zoneLowLine, zoneHighLine, color.new(color.blue, 98)))

// ==================================================================
// 12. SE HOUVER SWING VÁLIDO, CALCULA NÍVEIS DE FIBO, PESOS E DESENHA
// ==================================================================
float threshold = minSignificance
int[] topIndices = array.new_int()

// PASSO 1: Obter TODOS os dados do swing da biblioteca, incluindo o 'fibScore'.
[fibP1, fibP2, fibP3, fibDir, fibModeActive, fibP1Bar, fibP2Bar, fibP3Bar, fibPbPct, fibBreakout, fibScore] = swing.determineFib(pivotPrices, pivotTypes, pivotBars, biasVal, fibModeInput, atrLength, fractalPrices, atrValue, pbQualityIdeal, pbQualityGood, durationOptimalMin, durationOptimalMax)
// PASSO 2: Atribuir o score retornado à nossa variável global 'lastSwingScore'.
// Este é o único lugar onde lastSwingScore é atualizado.
lastSwingScore := fibScore

// PASSO 3: Mostrar informações de diagnóstico, se habilitado.
if showDiagnostics and not na(fibP1)
    string txtDiag = "Modo: " + fibModeActive + "\n"
    txtDiag += "P1→P2: " + str.tostring(fibP1) + " → " + str.tostring(fibP2) + "\n"
    txtDiag += "Pullback %: " + str.tostring(fibPbPct * 100, "#.##") + "%\n"
    txtDiag += "Breakout: " + (str.tostring(fibBreakout)) + "\n"
    txtDiag += "Score: " + str.tostring(lastSwingScore, "#.##")
    if na(diagLabel)
        diagLabel := label.new(bar_index, high, txtDiag, style=label.style_label_down, color=color.gray, textcolor=color.white, size=size.small)
    else
        label.set_xy(diagLabel, bar_index, high)
        label.set_text(diagLabel, txtDiag)
else
    if not na(diagLabel)
        label.delete(diagLabel)
        diagLabel := na

// PASSO 4: Atualiza swing ativo aplicando lógica de inércia
// ---------------------------------------------------------
// 1) Verifica se o swing ativo deve ser invalidado
if not na(activeP1)
    bool breakP1 = activeDir == 1 ? close < activeP1 : close > activeP1
    bool breakP2 = false
    if invalidateOnP2Break and activeMode == "Retracement"
        breakP2 := swing.hasImpulseBreakout(activeDir, activeP2, atrValue)
    if breakP1 or breakP2
        activeP1 := na
        activeP2 := na
        activeP3 := na
        activeDir := 0
        activeMode := "Retracement"
        activeP1Bar := na
        activeP2Bar := na
        activeP3Bar := na
        activePbPct := na
        activeBreakout := false
        activeScore := na

// 2) Caso não exista swing ativo ou o novo seja significativamente melhor, substitui
bool replaceActive = false

if not na(fibP1) and not na(fibP2)
    if na(activeP1)
        replaceActive := true
    else if na(activeScore) or fibScore >= activeScore * (1 + scoreThresholdPct / 100)
        replaceActive := true
    if replaceActive
        activeP1 := fibP1
        activeP2 := fibP2
        activeP3 := fibP3
        activeDir := fibDir
        activeMode := fibModeActive
        activeP1Bar := fibP1Bar
        activeP2Bar := fibP2Bar
        activeP3Bar := fibP3Bar
        activePbPct := fibPbPct
        activeBreakout := fibBreakout
        activeScore := fibScore

// A partir daqui usamos as variáveis 'active*' para desenhar
if not na(activeP1) and not na(activeP2)
    float baseRange = math.abs(activeP2 - activeP1)
    if activeDir == 1
        if activeMode == "Retracement"
            bottomVal := activeP1, topVal := activeP2
        else if activeMode == "Extension"
            bottomVal := activeP2, topVal := activeP2 + baseRange
        else
            bottomVal := activeP3, topVal := activeP3 + baseRange
    else
        if activeMode == "Retracement"
            topVal := activeP1, bottomVal := activeP2
        else if activeMode == "Extension"
            topVal := activeP2, bottomVal := activeP2 - baseRange
        else
            topVal := activeP3, bottomVal := activeP3 - baseRange
    rangeVal := math.abs(topVal - bottomVal)

    for i = 0 to levelsCount - 1
        float lvlFrac  = array.get(fibLevels, i)
        float lvlPrice = na
        if activeMode == "Retracement"
            lvlPrice := activeDir == 1 ? activeP2 - baseRange * lvlFrac : activeP2 + baseRange * lvlFrac
        else if activeMode == "Extension"
            lvlPrice := activeDir == 1 ? activeP2 + baseRange * lvlFrac : activeP2 - baseRange * lvlFrac
        else
            lvlPrice := activeDir == 1 ? activeP3 + baseRange * lvlFrac : activeP3 - baseRange * lvlFrac
        array.set(fibPrices, i, lvlPrice)
    int trendDir = activeDir

    // ==================================================================
    // 12.A) CÁLCULO DE “weight” E maxWeight
    // ==================================================================
    float maxWeight = 0.0
    int startIdx3 = math.max(0, array.size(fractalPrices) - maxFractalsToCheck)

    for i = 0 to levelsCount - 1
        float priceF = array.get(fibPrices, i)
        float distPctCalc = fractals.calcDist(priceF, atrValue, volPct, atrMultiplier, syminfo.mintick)
        int contagem = 0
        for j = startIdx3 to array.size(fractalPrices) - 1
            float fractalPrice = array.get(fractalPrices, j)
            if math.abs(fractalPrice - priceF) <= distPctCalc
                contagem += 1

        // Peso levando em conta o score do swing ativo
        float weight = fibomath.calcWeight(priceF, contagem, h1Mean, h1Stdev, minZScoreAdj, activeScore, swingScoreIntensity)
        array.set(fibWeights, i, weight)

        if weight > maxWeight
            maxWeight := weight
    lastMaxWeight := maxWeight

    // ==================================================================
    // 12.B) DETERMINAR “topIndices” SE topN > 0
    // ==================================================================
    if topN > 0
        float[] tempWeights = array.copy(fibWeights)
        int limit = math.min(topN, levelsCount)
        for t = 0 to limit - 1
            float bestW = -1.0, int idxMax = -1
            for m = 0 to array.size(tempWeights) - 1
                if array.get(tempWeights, m) > bestW
                    bestW := array.get(tempWeights, m), idxMax := m
            if idxMax == -1 or bestW < minSignificance
                break
            array.push(topIndices, idxMax)
            array.set(tempWeights, idxMax, -1.0)
        if array.size(topIndices) > 0
            threshold := array.get(fibWeights, array.get(topIndices, array.size(topIndices) - 1))
        else
            threshold := minSignificance

    // ==================================================================
    // 12.C) DESENHAR OS ELEMENTOS (LINHAS, ZONAS, ETC)
    // ==================================================================
    if showFibLines and maxWeight > 0
        for i = 0 to levelsCount - 1
            float priceF   = array.get(fibPrices, i)
            float weight   = array.get(fibWeights, i)
            float lvlFrac  = array.get(fibLevels, i)
            float pctW     = (lastMaxWeight > 0) ? (weight / lastMaxWeight) : 0.0
            int   clustCnt = fibomath.getClusterCount(clusterCounts, clusterPrices, priceF, atrValue, volPct, atrMultiplier, syminfo.mintick) + 1
            bool validLevel = fibomath.isDisplayAllowed(weight, pctW, i, lvlFrac, replayMode, swingBars, replayStartIdx, bar_index, doAutoHide, weightMinPct, topNMode, topN, topIndices, threshold, biasVal)

            if not validLevel
                draw.updateFibLineAndLabel(bottomVal, topVal, rangeVal, fibLines, fibLabels, circleLabels, i, false, priceF, weight, lastMaxWeight, color.gray, 1, line.style_dotted, trendDir)
            else
                bool isTop    = (weight == lastMaxWeight)
                bool isHigh   = (weight >= lastMaxWeight * HIGH_WEIGHT_FRAC) and not isTop
                bool isMedium = (weight >= lastMaxWeight * MEDIUM_WEIGHT_FRAC) and not (isTop or isHigh)
                color baseColor = isTop ? color.red : isHigh ? color.yellow : isMedium ? color.green : color.new(color.blue, 80)
                int lw = (isTop ? 3 : isHigh ? 2 : 1) + (clustCnt - 1)
                string styleLine = (isTop or lvlFrac == 0.0 or lvlFrac == 1.0) ? line.style_solid : line.style_dotted
                draw.updateFibLineAndLabel(bottomVal, topVal, rangeVal, fibLines, fibLabels, circleLabels, i, true, priceF, weight, lastMaxWeight, color.new(baseColor, 80), lw, styleLine, trendDir)

    if showZones and maxWeight > 0
        for i = 0 to levelsCount - 1
            float priceF   = array.get(fibPrices, i)
            float weight   = array.get(fibWeights, i)
            float lvlFrac  = array.get(fibLevels, i)
            float pctW     = (lastMaxWeight > 0) ? (weight / lastMaxWeight) : 0.0
            bool validZone = fibomath.isDisplayAllowed(weight, pctW, i, lvlFrac, replayMode, swingBars, replayStartIdx, bar_index, doAutoHide, weightMinPct, topNMode, topN, topIndices, threshold, biasVal)

            if validZone
                float distPct  = fractals.calcDist(priceF,atrValue,volPct,atrMultiplier,syminfo.mintick)
                float lowZone  = priceF - distPct
                float highZone = priceF + distPct
                bool isTop    = (weight == lastMaxWeight)
                bool isHigh   = (weight >= lastMaxWeight * HIGH_WEIGHT_FRAC) and not isTop
                bool isMedium = (weight >= lastMaxWeight * MEDIUM_WEIGHT_FRAC) and not (isTop or isHigh)
                color borderColor = isTop ? color.red : isHigh ? color.yellow : isMedium ? color.green : color.blue
                color fillColor   = color.new(borderColor, 80)
                draw.updateFibZone(zoneFills, zoneLinesLow, zoneLinesHigh, i, true, lowZone, highZone, borderColor, fillColor)

    // Desenha os pivôs P1, P2, P3
    if showFibPivots
        float offset = syminfo.mintick * 5
        label lp1 = array.get(fibPivotLabels, 0), label lp2 = array.get(fibPivotLabels, 1), label lp3 = array.get(fibPivotLabels, 2)
        label.set_xy(lp1, activeP1Bar, activeP1 + (activeDir == 1 ? -offset : offset)), label.set_text(lp1, "P1"), label.set_style(lp1, activeDir == 1 ? label.style_label_up : label.style_label_down)
        label.set_xy(lp2, activeP2Bar, activeP2 + (activeDir == 1 ? offset : -offset)), label.set_text(lp2, "P2"), label.set_style(lp2, activeDir == 1 ? label.style_label_down : label.style_label_up)
        if not na(activeP3Bar)
            label.set_xy(lp3, activeP3Bar, activeP3 + (activeDir == 1 ? -offset : offset)), label.set_text(lp3, "P3"), label.set_style(lp3, activeDir == 1 ? label.style_label_up : label.style_label_down)
        else
            label.set_text(lp3, "")

    // Lógica para registrar cluster
    if activeBreakout and not na(activeP3Bar)
        if na(lastAddedSwingBar) or activeP3Bar != lastAddedSwingBar
            for i = 0 to levelsCount - 1
                fibomath.recordClusterLevel(clusterCounts, clusterPrices, array.get(fibPrices, i), atrValue, volPct, atrMultiplier, syminfo.mintick)
            lastAddedSwingBar := activeP3Bar

else
    // Se nenhum swing válido for encontrado, esconde todos os elementos
    draw.hideFibElements(bottomVal, topVal, rangeVal, fibLines, fibLabels, circleLabels, fibPivotLabels, 0)
    draw.hideZones(zoneFills, zoneLinesLow, zoneLinesHigh)

// ==================================================================
// 13. TABELA DE STATUS (PARÂMETROS)
// ==================================================================
var table tableStatus = table.new(position.top_right, 2, 12, bgcolor=color.rgb(120, 123, 134, 39), border_color=color.gray, frame_color=color.gray)
if barstate.isfirst
    // Cabeçalhos
    table.cell(tableStatus, 0, 0, "Parâmetro",            bgcolor=color.new(color.blue, 30), text_color=color.white)
    table.cell(tableStatus, 1, 0, "Valor Atual",          bgcolor=color.new(color.blue, 30), text_color=color.white)
    table.cell(tableStatus, 0, 2, "Período EMA ATR",      text_color=color.white)
    table.cell(tableStatus, 0, 3, "Multiplicador ATR",    text_color=color.white)
    table.cell(tableStatus, 0, 4, "Volatilidade H1 (%)",  text_color=color.white)
    table.cell(tableStatus, 0, 5, "Período Média/Desvio", text_color=color.white)
    table.cell(tableStatus, 0, 6, "Signif. Mín (peso)",   text_color=color.white)
    table.cell(tableStatus, 0, 7, "Período Fractal (n)",  text_color=color.white)
    table.cell(tableStatus, 0, 8, "Top N Níveis",         text_color=color.white)
    table.cell(tableStatus, 0, 10, "Modo TopN",           text_color=color.white)
    table.cell(tableStatus, 0, 11, "Score",               text_color=color.white)

    string biasHeading = "Bias MA" + str.tostring(biasShortLen) + "/" + str.tostring(biasLongLen)
    table.cell(tableStatus, 0, 9, biasHeading,            text_color=color.white)

string atrTxt   = "ATR(" + str.tostring(atrLength) + ")"
string atrVal   = str.tostring(atrValue, "#.##")
string emaTxt   = str.tostring(atrEmaPeriod)
string multTxt  = str.tostring(atrMultiplier, "#.##")
string volTxt   = str.tostring(volPct * 100, "#.##") + "%"
string meanTxt  = str.tostring(meanStdLength)
string zTxt     = str.tostring(minSignificance, "#.##")
string nTxt     = str.tostring(n)
string topNTxt  = str.tostring(topN)

// Cor para TopN na tabela (cinza se 0, azul se >0)
color topNColor = (topN == 0) ? color.new(color.white, 50) : color.new(color.blue, 0)

table.cell(tableStatus, 0, 1, atrTxt,   text_color=color.white)
table.cell(tableStatus, 1, 1, atrVal,   text_color=color.white)
table.cell(tableStatus, 1, 2, emaTxt,   text_color=color.white)
table.cell(tableStatus, 1, 3, multTxt,  text_color=color.white)
table.cell(tableStatus, 1, 4, volTxt,   text_color=color.white)
table.cell(tableStatus, 1, 5, meanTxt,  text_color=color.white)
table.cell(tableStatus, 1, 6, zTxt,     text_color=color.yellow)
table.cell(tableStatus, 1, 7, nTxt,     text_color=color.white)
table.cell(tableStatus, 1, 8, topNTxt,  text_color=topNColor)
table.cell(tableStatus, 1, 9, biasTxt,  text_color=color.white)
table.cell(tableStatus, 1, 10, topNMode, text_color=color.white)
table.cell(tableStatus, 1, 11, str.tostring(lastSwingScore, "#.##"), text_color=color.white)

// ==================================================================
// 14. TABELA AUXILIAR DE “PROVA DE WEIGHT” (Top N / Z-score / Incluído?)
// ==================================================================
// tableWeights é declarado no bloco de variáveis persistentes
if barstate.isfirst
    // Cabeçalhos
    table.cell(tableWeights, 0, 0, "Nível (%)",  text_color=color.white, bgcolor=color.new(color.blue, 30))
    table.cell(tableWeights, 1, 0, "# Fractais", text_color=color.white, bgcolor=color.new(color.blue, 30))
    table.cell(tableWeights, 2, 0, "Z-score",    text_color=color.white, bgcolor=color.new(color.blue, 30))
    table.cell(tableWeights, 3, 0, "Peso",       text_color=color.white, bgcolor=color.new(color.blue, 30))
    table.cell(tableWeights, 4, 0, "Incluído?",  text_color=color.white, bgcolor=color.new(color.blue, 30))
    // Atualiza valores a cada barra para evitar exibir apenas configurações vazias
if lastMaxWeight > 0
    table.clear(tableWeights, 1, 1, 4, levelsCount)  // limpa células de dados
    for i = 0 to levelsCount - 1
        float lvlFrac  = array.get(fibLevels, i)
        float priceF   = array.get(fibPrices, i)
        float distPct  = fractals.calcDist(priceF,atrValue,volPct,atrMultiplier,syminfo.mintick)
        int cont       = 0

        // Recalcula contagem para tabela
        for j = math.max(0, array.size(fractalPrices) - maxFractalsToCheck) to array.size(fractalPrices) - 1
            if math.abs(array.get(fractalPrices, j) - priceF) <= distPct
                cont += 1

        float zVal = fibomath.calcZscore(priceF, h1Mean, h1Stdev)
        float wt   = array.get(fibWeights, i)
        float pctWeightTbl = lastMaxWeight > 0 ? (wt / lastMaxWeight) : 0.0

        // Verifica se está incluído (mesmos filtros de 12.C e 12.D)
        bool isIncluded = fibomath.isDisplayAllowed(wt, pctWeightTbl, i, lvlFrac, replayMode, swingBars, replayStartIdx, bar_index, doAutoHide, weightMinPct, topNMode, topN, topIndices, threshold, biasVal)

        string nivelTxt = str.tostring(lvlFrac * 100, "#.##") + "%"
        string inclTxt  = isIncluded ? "Sim" : "Não"

        // Células: Nível (%), # Fractais, Z-score, Peso, Incluído?
        table.cell(tableWeights, 0, i + 1, nivelTxt,           text_color=color.white)
        table.cell(tableWeights, 1, i + 1, str.tostring(cont), text_color=color.white)
        table.cell(tableWeights, 2, i + 1, str.tostring(math.abs(zVal), "#.##"), text_color=color.white)

        color cellBg = (wt == lastMaxWeight) ? color.new(color.red, 50) : (wt >= lastMaxWeight * 0.75) ? color.new(color.yellow, 50) : (wt >= lastMaxWeight * 0.50) ? color.new(color.green, 50) : color.new(color.blue, 80)

        table.cell(tableWeights, 3, i + 1, str.tostring(wt, "#.##"), text_color=color.white, bgcolor=cellBg)
        table.cell(tableWeights, 4, i + 1, inclTxt, text_color=color.white)

alertcondition(na(fibP1) or na(fibP2), title="Fibonacci invalido", message="Niveis de Fibonacci ausentes")
alertcondition(lastMaxWeight == 0, title="Peso zero", message="Pesos zerados - volatilidade baixa")
if na(debugLbl)
    debugLbl := label.new(x = bar_index, y = close, text = "", xloc = xloc.bar_index, yloc = yloc.price, color = color.new(color.red, 100))
string msg = ""
if na(fibP1) or na(fibP2)
    msg += "Fibo"
if lastMaxWeight == 0
    msg += " Peso=0"
label.set_xy(debugLbl, bar_index, close)
label.set_text(debugLbl, msg)
label.set_color(debugLbl, color.new(color.red, msg == "" ? 100 : 0))
// ==================================================================
// FIM DO v2.4.4 (placeholders fixos, filtros unificados, sem vazamento)
// ==================================================================
